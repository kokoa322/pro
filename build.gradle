//queryDsl
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.13'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.baesullin'
version = '0.0.1-SNAPSHOT'


java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:2.7.0'
	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.hibernate.validator:hibernate-validator'
	// gson 라이브러리
	implementation 'com.google.code.gson:gson:2.9.0'
	//JSON 변환을 위한 Jackson Library
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
	//log
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	//jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	//유효성
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.projectlombok:lombok:1.18.26'
	//lombok
	compileOnly 'org.projectlombok:lombok'
	//S3 파일업로드
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.1'
	//queryDSL
	implementation "com.querydsl:querydsl-jpa:5.0.0"
	implementation "com.querydsl:querydsl-apt:5.0.0"
	//swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

//h2 DB
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//queryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	//테스트 코드
	testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.7.0")
	testImplementation('org.junit.jupiter:junit-jupiter:5.7.0')
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.7.0")
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
// 현재 프로젝트에서는 Rest API 규약으로 개발하여 Thymeleaf 문법을 사용하지 않기때문에 저는 적용해 주지 않았습니다.
//implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
}



def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

tasks.named('test') {
	useJUnitPlatform()
}
